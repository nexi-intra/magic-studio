"use client";
import { useSQLSelect3 } from "@/app/koksmat/usesqlselect3";
import DynamicIcon from "@/components/dynamic-icon";
import { pizzaOrderWorkflow } from "@/components/flows/sample";
import LayoutHeader from "@/components/layout-header";
import LayoutThreeRowsLeftPanelAndResults from "@/components/layout-three-rows-left-panel-and-results";
import MermaidDiagram from "@/components/mermaid-diagram";
import WithClipboardCopy from "@/components/with-clipboardcopy";

import WorkflowEditor from "@/components/workflow-editor2";
import {
  generateMermaidSequenceDiagram,
  WorkflowData,
} from "@/components/workflow-interfaces";
import WorkflowStatus from "@/components/workflow-status";
import { parseWorkflowYaml, WorkflowFile } from "@/lib/workflow-utils";
import React, { use, useEffect, useState } from "react";
export default function Page(props: { params: { model: string } }) {
  const { model } = props.params;

  const [flow, setFlow] = useState<WorkflowFile>();

  const [workflowData, setworkflowData] = useState<WorkflowData>({
    version: 1,
    name: "",
    id: "string",
    actors: {},
    description: "s",
    purpose: "x",

    stage: [],
  });

  useEffect(() => {
    setFlow(pizzaOrderWorkflow);
  }, []);

  //#region Load
  /* ---------------------- Load Record ----------------------
   * KOKSMAT GENERATED CODE START
   * This code is generated by koksmat. You can modify it as you like.
   * The code is generated based on the database and table you have selected.
   * No waranty is given for the code.
   * ----------------------------------------------------------
   */

  interface WorksActivitymodelItem {
    id: number;
    created_at: string;
    created_by: string;
    updated_at: string;
    updated_by: string;
    deleted_at: null;
    tenant: string;
    searchindex: string;
    name: string;
    description: string;
    activity: string;
    data: Data;
    koksmat_masterdataref: null;
    koksmat_bucket: null;
    koksmat_masterdata_id: null;
    koksmat_masterdata_etag: null;
    koksmat_state: null;
    koksmat_compliancetag: null;
  }
  interface Data {
    id: string;
    name: string;
    stage: Stage[];
    actors: Actors;
    purpose: string;
    version: number;
    description: string;
  }
  interface Actors {
    app: App;
    shop: App;
    user: App;
    system: App;
    auditlog: App;
    restaurant: App;
    delivery_person: App;
  }
  interface App {
    name: string;
    description: string;
  }
  interface Stage {
    id: string;
    name: string;
    raci?: Raci;
    actions: Action[];
    triggers?: Triggers;
    decisions?: Decision[];
  }
  interface Decision {
    id: string;
    icon: string;
    name: string;
    description: string;
  }
  interface Triggers {
    actions: Action2[];
  }
  interface Action2 {
    id: string;
    sql: string;
    name: string;
    description: string;
  }
  interface Action {
    id: string;
    ui: string;
    icon: string;
    name: string;
    description: string;
    interactive: boolean;
    transaction?: string;
    sql?: string;
  }
  interface Raci {
    informed: string;
    consulted?: string;
    responsible: string;
  }
  const [error, seterror] = useState("");
  const databaseQuery = useSQLSelect3<WorksActivitymodelItem>(
    "works",
    `SELECT * FROM "activitymodel" WHERE id = ${model} ` // you might like to take the id from somewhere else
  );
  const [databaseRecord, setdatabaseRecord] =
    useState<WorksActivitymodelItem>();
  useEffect(() => {
    if (databaseQuery.isLoading) return;
    if (databaseQuery.error) {
      seterror(databaseQuery.error);
      return;
    }
    if (databaseQuery.dataset.length === 0) {
      seterror("No data found");
      return;
    }
    setdatabaseRecord(databaseQuery.dataset[0]);

    // setFlow(workflow);
  }, [databaseQuery]);

  useEffect(() => {
    if (databaseRecord) {
      setworkflowData(databaseRecord.data as any);

      // setXX(databaseRecord.data); // you might want to set the data to a state variable
    }
  }, [databaseRecord]);

  /*
   * ---------------------- Load Record ----------------------
   * KOKSMAT GENERATED CODE END
   * This code is generated by koksmat. You can modify it as you like.
   * The code is generated based on the database and table you have selected.
   * No waranty is given for the code.
   * ----------------------------------------------------------
   */
  //#endregion

  // const rightPanel = <WorkflowEditor flow={flow} />;
  // return rightPanel;

  //const diagram = generateMermaidSequenceDiagram(workflowData);
  const centerPanel = <WorkflowStatus workflowData={workflowData} />;
  const rightPanel = "";
  const leftPanel = null; //<pre>{diagram}</pre>; //
  return (
    <div className="w-full">
      <LayoutHeader
        error={error}
        title="Workflow"
        tools={[
          <WithClipboardCopy
            key="1"
            text={JSON.stringify(workflowData, null, 2)}
          >
            Copy
          </WithClipboardCopy>,
        ]}
      />
      <div className="flex">
        <div className="w-[300px] overflow-auto">{leftPanel}</div>
        <div className="grow">{centerPanel}</div>
        <div className="grow">{rightPanel}</div>
      </div>
    </div>
  );
}
