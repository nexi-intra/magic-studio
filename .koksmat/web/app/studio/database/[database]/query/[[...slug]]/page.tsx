"use client";
import { SqlQueryEditor } from "@/components/sql-query-editor";
import { MagicboxContext } from "@/app/koksmat/magicbox-context";

import React, { useContext, useEffect, useState } from "react";
import CreateSqlquery from "@/actions/database/mix/create_sqlquery";
import { APPNAME } from "@/app/global";
import { useRouter } from "next/navigation";
import { QueryEditorToolbar } from "@/components/query-editor-toolbar";
import { useSQLSelect3 } from "@/app/koksmat/usesqlselect3";




/* ---------------------- Load Record ---------------------- 
* This code is generated by Koksmat Studio. You can modify it as you like.
* The code is generated based on the database and table you have selected.
* No warranty is given for the code.
* ----------------------------------------------------------
*/

// import { useSQLSelect3 } from "@/app/koksmat/usesqlselect3";
// import React, { useEffect, useState } from "react";
// const { databaseRecord, isLoading, error } = useDatabaseMixSqlqueryItem(props.id);  // replace props.id with the id of the record you want to load

interface MixSqlqueryItem {
  id: number;
  created_at: string;
  created_by: string;
  updated_at: string;
  updated_by: string;
  deleted_at: null;
  tenant: string;
  searchindex: string;
  name: string;
  description: string;
  sql: string;
  connection_id: number;
  schema: Schema;
  koksmat_masterdataref: null;
  koksmat_bucket: null;
  koksmat_masterdata_id: null;
  koksmat_masterdata_etag: null;
  koksmat_state: null;
  koksmat_compliancetag: null;
}
interface Schema {
  schema: string;
}

function useReadDatabaseMixSqlqueryItem(id: string) {


  const [error, seterror] = useState("");
  const databaseQuery = useSQLSelect3<MixSqlqueryItem>(
    "mix",
    `SELECT * FROM "sqlquery" WHERE id = ${id} `
  );
  const [databaseRecord, setdatabaseRecord] = useState<MixSqlqueryItem>();
  useEffect(() => {
    if (databaseQuery.isLoading) return;
    if (databaseQuery.error) {
      seterror(databaseQuery.error);
      return;
    }
    if (databaseQuery.dataset.length === 0) {
      seterror("No data found");
      return;
    }
    setdatabaseRecord(databaseQuery.dataset[0]);


  }, [databaseQuery]);



  return { databaseRecord, error, isLoading: databaseQuery.isLoading };
}








/* ---------------------- Load Record ---------------------- 
* This code is generated by Koksmat Studio. You can modify it as you like.
* The code is generated based on the database and table you have selected.
* No warranty is given for the code.
* ----------------------------------------------------------
*/

import { execute } from "@/actions/client";
// import React, { useEffect, useState } from "react";
// const { databaseRecord, isLoading, error } = useDatabaseMixSqlqueryItem(props.id);  // replace props.id with the id of the record you want to load

function useUpdateDatabaseMixSqlqueryItemRecord() {
  const magicbox = useContext(MagicboxContext);
  const [error, seterror] = useState("");
  const [loading, setloading] = useState(false);
  const [result, setresult] = useState<any>();
  const update = async (record: any) => {
    setloading(true);
    seterror("");
    const result = await execute(

      magicbox.authtoken, // <-- this is the authentication token containing the user's credentials - the upn will be used as "actor" name
      "works", // <-- this is a reference to a record in the connections table in the mix database
      "magic-mix.app", // <-- this is the service name processing the request
      "update_sqlquery", // <-- this is the name of the procedure in the database pointed to by the connection
      record // <-- this is the data to be sent to the procedure
    );
    setloading(false);
    if (result.hasError) {
      seterror(result.errorMessage ?? "Unknown error");
    }
    setresult(result);


  }
  return { update, error, loading, result };
}






export default function Page(props: { params: { database: string, slug: string[] } }) {
  const router = useRouter();
  const { database, slug } = props.params;
  const subpath = slug ? slug.join("/") : ""
  const [name, setname] = useState("");

  const [showSheet, setshowSheet] = useState(true);
  const magicbox = useContext(MagicboxContext);
  const [error, seterror] = useState("");
  const handleSave = async () => {
    debugger
    seterror("");
    if (!databaseRecord) return
    databaseRecord.sql = sql;
    updater.update(databaseRecord)
    // const result = await CreateSqlquery(
    //   magicbox.authtoken,
    //   name,
    //   "",
    //   sql.replaceAll("'", "''"),
    //   2,
    //   {}
    // );
    // if (result.hasError) {
    //   seterror(result.errorMessage ?? "Unknown error");
    // } else {
    //   seterror("");
    //   router.push(
    //     "/" + APPNAME + "/database/" + database + "/query/" + result.data
    //   );
    // }
  }
  const toolbar = <QueryEditorToolbar database={database} handleSave={handleSave} />;
  const { databaseRecord, isLoading, error: databaseerror } = useReadDatabaseMixSqlqueryItem(subpath);  // replace props.id with the id of the record you want to load
  const updater = useUpdateDatabaseMixSqlqueryItemRecord();
  const [sql, setsql] = useState(`
  /**
   * Write your query here
   * and click on the Run button
   */        
          
  select 1 as result`)
  useEffect(() => {
    seterror(databaseerror)
    if (databaseRecord) {
      setsql(databaseRecord.sql)
      setname(databaseRecord.name)
    }

  }, [databaseRecord, databaseerror])

  useEffect(() => {
    if (!subpath) {
      return;
    }


  }, [subpath])

  return (
    <div>

      <SqlQueryEditor
        toolbar={toolbar}
        database={database}
        name={name}
        onChange={async (newSQL: string) => {
          setsql(newSQL)
        }}
        sql={sql}
      />

    </div>

  );
}
