/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/fmDfVFNd5Af
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import {
  Command,
  CommandInput,
  CommandEmpty,
  CommandGroup,
  CommandItem,
} from "@/components/ui/command";
import { useSQLSelect } from "@/app/koksmat/usesqlselect";
import { useSQLSelect3 } from "@/app/koksmat/usesqlselect3";
import { useEffect, useState } from "react";

export interface FilterOption {
  label: string;
  values: string[];
}

/**
 * 
 * @param props 
 * 
 * @returns 
 * 
 * const filterOptions = [
    {
      label: "Category",
      values: ["Shirts", "Pants", "Dresses", "Accessories"],
    },
    {
      label: "Size",
      values: ["XS", "S", "M", "L", "XL"],
    },
    {
      label: "Color",
      values: ["Red", "Blue", "Green", "Black", "White"],
    },
    {
      label: "Price",
      values: ["$0 - $50", "$50 - $100", "$100 - $200", "$200+"],
    },
  ];
 */
export function FilterToolbar(props: { database: string; table: string }) {
  const { database, table } = props;
  const query = useSQLSelect3(
    props.database,
    `
DO $$
DECLARE
    column_info json;
BEGIN
    SELECT json_object_agg(column_name, column_distinct_values)
    INTO column_info
    FROM (
        SELECT
            column_name,
            CASE
                WHEN count(DISTINCT column_name) > 100 THEN null
                ELSE json_agg(DISTINCT column_name ORDER BY column_name)
            END AS column_distinct_values
        FROM ${table}
        CROSS JOIN (
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = '${table}'
        ) AS columns_info
        GROUP BY column_name
    ) AS agg_result;
    
    RAISE NOTICE 'Column Distinct Values: %', column_info;
END $$

    
  `
  );
  const [filterOptions, setfilterOptions] = useState([
    {
      label: "Category",
      values: ["Shirts", "Pants", "Dresses", "Accessories"],
    },
    {
      label: "Size",
      values: ["XS", "S", "M", "L", "XL"],
    },
    {
      label: "Color",
      values: ["Red", "Blue", "Green", "Black", "White"],
    },
    {
      label: "Price",
      values: ["$0 - $50", "$50 - $100", "$100 - $200", "$200+"],
    },
  ]);

  useEffect(() => {}, [database, table, query]);

  return (
    <div className="flex items-center justify-between bg-background border-b px-4 py-3">
      <div className=" items-center gap-4">
        {filterOptions.map((option, index) => (
          <DropdownMenu key={index}>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="flex items-center gap-2">
                {option.label}
                <ChevronDownIcon className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-[200px] p-0">
              <Command>
                <CommandInput
                  placeholder={`Search ${option.label}...`}
                  className="h-9"
                />
                <CommandEmpty>No {option.label} found.</CommandEmpty>
                <CommandGroup>
                  {option.values.map((value, i) => (
                    <CommandItem key={i}>{value}</CommandItem>
                  ))}
                </CommandGroup>
              </Command>
            </DropdownMenuContent>
          </DropdownMenu>
        ))}
      </div>
      <div className="flex items-center gap-2">
        <Button variant="outline">Clear Filters</Button>
        <Button>Apply Filters</Button>
      </div>
    </div>
  );
}

function ChevronDownIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m6 9 6 6 6-6" />
    </svg>
  );
}
