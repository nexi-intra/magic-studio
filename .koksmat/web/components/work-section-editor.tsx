/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/FQu6PPTR8Bh
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Rubik } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Collapsible, CollapsibleTrigger, CollapsibleContent } from "@/components/ui/collapsible"
import { Checkbox } from "@/components/ui/checkbox"

export function WorkSectionEditor() {
  const [sections, setSections] = useState([
    {
      id: "section-1",
      title: "Section 1",
      content: "This is the content for Section 1.",
      collapsed: false,
    },
    {
      id: "section-2",
      title: "Section 2",
      content: "This is the content for Section 2.",
      collapsed: false,
    },
    {
      id: "section-3",
      title: "Section 3",
      content: "This is the content for Section 3.",
      collapsed: false,
    },
  ])
  const [selectedSections, setSelectedSections] = useState([])
  const [isSelectionMode, setIsSelectionMode] = useState(false)
  const [isDetailsPanel, setIsDetailsPanel] = useState(false)
  const handleSectionCollapse = (id) => {
    setSections((prevSections) =>
      prevSections.map((section) => (section.id === id ? { ...section, collapsed: !section.collapsed } : section)),
    )
  }
  const handleSectionSelect = (id) => {
    if (isSelectionMode) {
      setSelectedSections((prevSelectedSections) => {
        if (prevSelectedSections.includes(id)) {
          return prevSelectedSections.filter((sectionId) => sectionId !== id)
        } else {
          return [...prevSelectedSections, id]
        }
      })
    }
  }
  const handleAddSection = () => {
    const newSection = {
      id: `section-${sections.length + 1}`,
      title: `New Section ${sections.length + 1}`,
      content: "This is the content for the new section.",
      collapsed: false,
    }
    setSections((prevSections) => [...prevSections, newSection])
  }
  const handleToggleSelectionMode = () => {
    setIsSelectionMode((prevMode) => !prevMode)
    setSelectedSections([])
  }
  const handleToggleDetailsPanel = () => {
    setIsDetailsPanel((prevState) => !prevState)
  }
  const handleSectionReorder = (dragIndex, hoverIndex) => {
    setSections((prevSections) => {
      const updatedSections = [...prevSections]
      const [removedSection] = updatedSections.splice(dragIndex, 1)
      updatedSections.splice(hoverIndex, 0, removedSection)
      return updatedSections
    })
  }
  return (
    <div className="flex h-screen w-full">
      <div className="flex-1 bg-background p-6">
        <div className="flex items-center justify-between mb-4">
          <h1 className="text-2xl font-bold">Manage Sections</h1>
          <div className="flex items-center gap-2">
            <Button onClick={handleAddSection}>
              <PlusIcon className="w-4 h-4 mr-2" />
              Add Section
            </Button>
            <Button variant={isSelectionMode ? "primary" : "outline"} onClick={handleToggleSelectionMode}>
              <BoxSelectIcon className="w-4 h-4 mr-2" />
              {isSelectionMode ? "Done" : "Select"}
            </Button>
            <Button onClick={handleToggleDetailsPanel}>
              <InfoIcon className="w-4 h-4 mr-2" />
              Details
            </Button>
          </div>
        </div>
        <div className="grid gap-4">
          {sections.map((section, index) => (
            <Collapsible
              key={section.id}
              className={`border rounded-lg ${
                selectedSections.includes(section.id) ? "border-primary" : "border-border"
              }`}
              onMouseDown={(e) => handleSectionSelect(section.id)}
            >
              <div className="flex items-center justify-between px-4 py-3">
                <div className="flex items-center gap-2">
                  <Checkbox checked={selectedSections.includes(section.id)} disabled={!isSelectionMode} />
                  <div
                    className={`cursor-move ${isSelectionMode ? "opacity-100" : "opacity-0 group-hover:opacity-100"}`}
                  >
                    <DrumIcon className="w-4 h-4" />
                  </div>
                  <h3 className="text-lg font-semibold">{section.title}</h3>
                </div>
                <CollapsibleTrigger asChild>
                  <Button variant="ghost" size="icon" onClick={() => handleSectionCollapse(section.id)}>
                    <ChevronDownIcon className="w-5 h-5" />
                  </Button>
                </CollapsibleTrigger>
              </div>
              <CollapsibleContent className="px-4 py-3">{section.content}</CollapsibleContent>
            </Collapsible>
          ))}
        </div>
      </div>
      {isDetailsPanel && (
        <div className="w-80 bg-muted p-6">
          <h2 className="text-xl font-bold mb-4">Section Details</h2>
          {selectedSections.length === 1 ? (
            <div>
              <h3 className="text-lg font-semibold mb-2">{sections.find((s) => s.id === selectedSections[0]).title}</h3>
              <p className="mb-4">{sections.find((s) => s.id === selectedSections[0]).content}</p>
              <div className="flex items-center gap-2">
                <Button variant="outline">Edit</Button>
                <Button variant="destructive">Delete</Button>
              </div>
            </div>
          ) : (
            <p>Select a section to view its details.</p>
          )}
        </div>
      )}
    </div>
  )
}

function BoxSelectIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 3a2 2 0 0 0-2 2" />
      <path d="M19 3a2 2 0 0 1 2 2" />
      <path d="M21 19a2 2 0 0 1-2 2" />
      <path d="M5 21a2 2 0 0 1-2-2" />
      <path d="M9 3h1" />
      <path d="M9 21h1" />
      <path d="M14 3h1" />
      <path d="M14 21h1" />
      <path d="M3 9v1" />
      <path d="M21 9v1" />
      <path d="M3 14v1" />
      <path d="M21 14v1" />
    </svg>
  )
}


function ChevronDownIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m6 9 6 6 6-6" />
    </svg>
  )
}


function ChevronUpIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m18 15-6-6-6 6" />
    </svg>
  )
}


function DrumIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m2 2 8 8" />
      <path d="m22 2-8 8" />
      <ellipse cx="12" cy="9" rx="10" ry="5" />
      <path d="M7 13.4v7.9" />
      <path d="M12 14v8" />
      <path d="M17 13.4v7.9" />
      <path d="M2 9v8a10 5 0 0 0 20 0V9" />
    </svg>
  )
}


function InfoIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <path d="M12 16v-4" />
      <path d="M12 8h.01" />
    </svg>
  )
}


function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}


function TextSelectIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 3a2 2 0 0 0-2 2" />
      <path d="M19 3a2 2 0 0 1 2 2" />
      <path d="M21 19a2 2 0 0 1-2 2" />
      <path d="M5 21a2 2 0 0 1-2-2" />
      <path d="M9 3h1" />
      <path d="M9 21h1" />
      <path d="M14 3h1" />
      <path d="M14 21h1" />
      <path d="M3 9v1" />
      <path d="M21 9v1" />
      <path d="M3 14v1" />
      <path d="M21 14v1" />
      <line x1="7" x2="15" y1="8" y2="8" />
      <line x1="7" x2="17" y1="12" y2="12" />
      <line x1="7" x2="13" y1="16" y2="16" />
    </svg>
  )
}
