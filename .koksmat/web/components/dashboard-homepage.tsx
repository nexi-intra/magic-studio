/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/H0xs2HEKhFa
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ChevronDownIcon } from "./icons/ChevronDownIcon";

export function DashboardHomepage() {
  const [timeRange, setTimeRange] = useState("this_week");
  const handleTimeRangeChange = (range: any) => {
    setTimeRange(range);
  };
  const recentViews = [
    { id: 1, title: "Homepage", views: 2345 },
    { id: 2, title: "Pricing", views: 1234 },
    { id: 3, title: "Blog", views: 987 },
    { id: 4, title: "About", views: 654 },
  ];
  const recentDatabases = [
    { id: 1, name: "users", size: "256MB" },
    { id: 2, name: "products", size: "512MB" },
    { id: 3, name: "orders", size: "128MB" },
    { id: 4, name: "analytics", size: "1GB" },
  ];
  const recentJobs = [
    { id: 1, name: "Data Import", status: "Completed" },
    { id: 2, name: "Email Campaign", status: "Pending" },
    { id: 3, name: "Analytics Report", status: "Failed" },
    { id: 4, name: "Backup Database", status: "Completed" },
  ];
  const failedJobs = [
    { id: 1, name: "Analytics Report", reason: "Database connection error" },
    { id: 2, name: "Email Campaign", reason: "Invalid email list" },
  ];
  const totalTransactions = 12345;
  const uniqueVisitors = 3456;
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <div className="col-span-1 md:col-span-2 lg:col-span-3">
        <Card>
          <CardHeader>
            <CardTitle>Dashboard</CardTitle>
            <div className="flex items-center gap-4">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="sm">
                    {timeRange === "this_week"
                      ? "This Week"
                      : timeRange === "previous_week"
                        ? "Previous Week"
                        : timeRange === "month"
                          ? "This Month"
                          : timeRange === "today"
                            ? "Today"
                            : timeRange === "yesterday"
                              ? "Yesterday"
                              : "Last Hour"}
                    <ChevronDownIcon className="w-4 h-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem
                    onClick={() => handleTimeRangeChange("this_week")}
                  >
                    This Week
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleTimeRangeChange("previous_week")}
                  >
                    Previous Week
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleTimeRangeChange("month")}
                  >
                    This Month
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleTimeRangeChange("today")}
                  >
                    Today
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleTimeRangeChange("yesterday")}
                  >
                    Yesterday
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => handleTimeRangeChange("last_hour")}
                  >
                    Last Hour
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </CardHeader>
          <CardContent className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Recent Views</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="grid gap-2">
                  {recentViews.map((view) => (
                    <li
                      key={view.id}
                      className="flex items-center justify-between"
                    >
                      <div>{view.title}</div>
                      <div className="text-muted-foreground">
                        {view.views.toLocaleString()}
                      </div>
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Recent Databases</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="grid gap-2">
                  {recentDatabases.map((db) => (
                    <li
                      key={db.id}
                      className="flex items-center justify-between"
                    >
                      <div>{db.name}</div>
                      <div className="text-muted-foreground">{db.size}</div>
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Recent Jobs</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="grid gap-2">
                  {recentJobs.map((job) => (
                    <li
                      key={job.id}
                      className="flex items-center justify-between"
                    >
                      <div>{job.name}</div>
                      <Badge
                        variant={
                          job.status === "Completed" ? "secondary" : "outline"
                        }
                      >
                        {job.status}
                      </Badge>
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Failed Jobs</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="grid gap-2">
                  {failedJobs.map((job) => (
                    <li
                      key={job.id}
                      className="flex items-center justify-between"
                    >
                      <div>{job.name}</div>
                      <div className="text-muted-foreground">{job.reason}</div>
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Total Transactions</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-4xl font-bold">
                  {totalTransactions.toLocaleString()}
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle>Unique Visitors</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-4xl font-bold">
                  {uniqueVisitors.toLocaleString()}
                </div>
              </CardContent>
            </Card>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
