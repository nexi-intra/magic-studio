"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/vFndfg4IeKP
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

import Link from "next/link";
import { Button } from "@/components/ui/button";
import { useSQLSelect3 } from "@/app/koksmat/usesqlselect3";
import { useContext, useEffect, useState } from "react";
import { APPNAME } from "@/app/global";
import { extractAndParseJson } from "@/lib/tsql-extract";
import { z } from "zod";
import { resolveRefs } from "json-refs";
import * as parserTypeScript from "prettier/parser-typescript";
import * as prettier from "prettier/standalone";
import { jsonSchemaToZod } from "json-schema-to-zod";
import InterfaceBuilder from "./interface-builder";
import { InterfaceViewer } from "./interface-viewer";
import { shareCreateBite } from "./actions/share-create-bite";
import { createIngredienceTemmplate } from "@/lib/kitchen";
import { nanoid } from "nanoid";
import { FilePenIcon } from "./icons/FilePenIcon";
import { DownloadIcon } from "./icons/DownloadIcon";
import { DatabaseIcon } from "./icons/DatabaseIcon";
import { buildInterface } from "@/lib/buildInterface";
import { Code2Icon, Play, PlayIcon, SquareFunction } from "lucide-react";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { dark } from "react-syntax-highlighter/dist/esm/styles/prism";
import { MagicboxContext } from "@/app/koksmat/magicbox-context";
import { set } from "date-fns";

export interface Root {
  Result: Result[];
}

export interface Result {
  procedure_info: ProcedureInfo;
}

export interface ProcedureInfo {
  procedure_name: string;
  comment: string;
  language: string;
  source_code: string;
  dependencies: any[];
}

export function StoredProcedurePage(props: {
  database: string;
  procedure: string;
}) {
  const { database, procedure } = props;

  const magicbox = useContext(MagicboxContext);
  const sql = `
WITH proc_source AS (
    SELECT
        p.oid AS procedure_oid,
        p.proname AS procedure_name,
        l.lanname AS language,
        pg_get_functiondef(p.oid) AS source_code,
        d.description AS comment
    FROM
        pg_proc p
    JOIN
        pg_language l ON p.prolang = l.oid
    LEFT JOIN
        pg_description d ON p.oid = d.objoid
    WHERE
        p.proname = '${procedure}'
),
func_deps AS (
    SELECT
        d.refobjid AS table_oid,
        d.objid AS procedure_oid,
        c2.relname AS table_name
    FROM
        pg_depend d
    JOIN
        pg_proc p ON d.objid = p.oid
    JOIN
        pg_class c2 ON d.refobjid = c2.oid
    WHERE
        p.proname = '${procedure}'
        AND c2.relkind = 'r'
)
SELECT json_build_object(
    'procedure_name', ps.procedure_name,
    'language', ps.language,
    'source_code', ps.source_code,
    'comment', ps.comment,
    'dependencies', COALESCE(json_agg(fd.table_name) FILTER (WHERE fd.table_name IS NOT NULL), '[]'::json)
) AS procedure_info
FROM
    proc_source ps
LEFT JOIN
    func_deps fd ON ps.procedure_oid = fd.procedure_oid
GROUP BY
    ps.procedure_name, ps.language, ps.source_code, ps.comment

  `;
  const query = useSQLSelect3<Result>(database, sql);

  const relationQuery = useSQLSelect3<any>(
    database,
    `
WITH RECURSIVE proc_deps AS (
    -- Starting point: Get the details of the target procedure
    SELECT 
        p.oid AS procedure_oid,
        p.proname AS procedure_name,
        pg_get_functiondef(p.oid) AS source_code,
        d.description AS comment
    FROM 
        pg_proc p
    LEFT JOIN 
        pg_description d ON p.oid = d.objoid
    WHERE 
        p.proname = '${procedure}'
    
    UNION ALL
    
    -- Recursively find all dependent procedures and functions
    SELECT 
        p.oid,
        p.proname,
        pg_get_functiondef(p.oid) AS source_code,
        d.description
    FROM 
        pg_depend dep
    JOIN 
        pg_proc p ON dep.objid = p.oid
    LEFT JOIN 
        pg_description d ON p.oid = d.objoid
    JOIN 
        proc_deps pd ON dep.refobjid = pd.procedure_oid
    WHERE 
        p.oid != pd.procedure_oid
),
table_deps AS (
    -- Get the tables that the target procedure and its dependencies depend on
    SELECT 
        DISTINCT c.relname AS table_name
    FROM 
        pg_depend dep
    JOIN 
        pg_class c ON dep.refobjid = c.oid
    JOIN 
        proc_deps pd ON dep.objid = pd.procedure_oid
    WHERE 
        c.relkind = 'r'
)
SELECT 
    'procedure' AS type,
    procedure_name AS name,
    source_code,
    comment
FROM 
    proc_deps
UNION ALL
SELECT 
    'table' AS type,
    table_name AS name,
    NULL AS source_code,
    NULL AS comment
FROM 
    table_deps
    
    `
  );
  const [procedureInfo, setprocedureInfo] = useState<ProcedureInfo>();
  const [jsonSchema, setjsonSchema] = useState<any | null>();
  const [zodSchema, setzodSchema] = useState<any | null>();
  const [tsInterface, settsInterface] = useState("");
  const [shareId, setshareId] = useState("");
  const [tsxComponentCode, settsxComponentCode] = useState("");
  const [errorMessage, seterrorMessage] = useState("");
  const [biteReady, setbiteReady] = useState(false);
  const [isProcessing, setisProcessing] = useState(false);

  useEffect(() => {
    if (query && query.dataset && query.dataset.length > 0) {
      setprocedureInfo(query.dataset[0].procedure_info);
    }
  }, [query.dataset]);

  useEffect(() => {
    if (!procedureInfo) {
      return;
    }

    const metadata = extractAndParseJson(procedureInfo.source_code);
    if (metadata) {
      try {
        setjsonSchema(metadata);
        const txtcode = jsonSchemaToZod(metadata);

        // const code = prettier.format(txtcode, {
        //   parser: "typescript",
        //   plugins: [parserTypeScript],
        // });
        //setzodSchema(JSON.parse(zodSchema));
        setzodSchema(txtcode);
      } catch (error) {
        setzodSchema(error);
      }
    }
  }, [procedureInfo]);

  useEffect(() => {
    const load = async () => {
      const code = await buildInterface(
        (procedureInfo?.procedure_name ?? "Unknown") + "Props",
        JSON.stringify(jsonSchema, null, 2)
      );
      settsInterface(code);
      const tsx = await createIngredienceTemmplate(
        database,
        procedure,
        "CreateBiteProps",
        code
      );
      settsxComponentCode(tsx.tsxContent);
    };
    load();
  }, [jsonSchema]);

  const handleShareCreateBite = async () => {
    setisProcessing(true);
    seterrorMessage("");
    let id = nanoid();
    setshareId(id);
    const result = await shareCreateBite(
      magicbox.authtoken,
      id,
      `A bite for ${procedure} in ${database}`,
      createIngredienceTemmplate(
        database,
        procedure,
        "CreateBiteProps",
        tsInterface
      )
    );
    setisProcessing(false);

    if (result.hasError) {
      seterrorMessage(result.errorMessage ?? "unknown error");
      return;
    }
    setbiteReady(true);
  };

  return (
    <div className="flex min-h-screen flex-col bg-background">
      <pre className="whitespace-pre-wrap">
        {JSON.stringify(
          {
            errorMessage,
            biteReady,
            token: magicbox.authtoken?.substring(0, 10),
          },
          null,
          2
        )}
      </pre>
      <header className="sticky top-0 z-40 border-b bg-background px-4 py-3 shadow-sm sm:px-6">
        <div className="container mx-auto flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Link href="#" className="flex items-center gap-2" prefetch={false}>
              <span className="font-bold text-3xl"></span>
              <SquareFunction className="h-6 w-6" />
              <span className="font-bold text-3xl">
                {procedure} ({database})
              </span>
            </Link>
            {/* <span className="text-muted-foreground">Procedure Name</span> */}
          </div>
          <div className="flex items-center gap-4">
            <Button variant="outline">
              <PlayIcon className="mr-2 h-4 w-4" />
              Run
            </Button>
            <Button
              disabled={isProcessing}
              onClick={() => handleShareCreateBite()}
            >
              <DownloadIcon className="mr-2 h-4 w-4" />
              Download
            </Button>
          </div>
        </div>
      </header>

      <div className="container mx-auto grid  gap-8 py-8 sm:px-6">
        <div className="space-y-8">
          <section>
            <h2 className="mb-4 text-2xl font-bold">Integration Options</h2>
            {/* <div>
              <h3 className="mb-2 text-lg font-medium">ZOD definition</h3>
              <pre className="text-wrap">{zodSchema}</pre>
            </div>
            <div>
              <h3 className="mb-2 text-lg font-medium">JSON schema</h3>
              <pre className="text-wrap">
                {JSON.stringify(jsonSchema, null, 2)}
              </pre>
            </div> */}
            {/* <InterfaceViewer /> */}
            <div>
              <h3 className="mb-2 text-lg font-medium">React Component</h3>
              <SyntaxHighlighter language="jsx" style={dark}>
                {tsxComponentCode}
              </SyntaxHighlighter>

              {/* <InterfaceBuilder
                schema={JSON.stringify(jsonSchema, null, 2)}
                typeName={
                  (procedureInfo?.procedure_name ?? "Unknown") + "Props"
                }
              /> */}
            </div>
          </section>
          <section>
            <h2 className="mb-4 text-2xl font-bold">Procedure Details</h2>
            <div className="grid gap-8">
              <div>
                <h3 className="mb-2 text-lg font-medium">Description</h3>
                <pre>{procedureInfo?.comment}</pre>
              </div>
              <div>
                <h3 className="mb-2 text-lg font-medium">Table Dependencies</h3>
                <ul className="space-y-1">
                  {procedureInfo?.dependencies.map((dep, index) => (
                    <li key={index}>
                      <Link
                        href={
                          "/" +
                          APPNAME +
                          "/database/" +
                          database +
                          "/table/" +
                          dep
                        }
                        className="text-primary hover:underline"
                        prefetch={false}
                      >
                        {dep}
                      </Link>
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <h3 className="mb-2 text-lg font-medium">Source Code</h3>
                <pre className="rounded-md bg-muted p-4 text-sm">
                  <code>{procedureInfo?.source_code}</code>
                </pre>
              </div>
            </div>
          </section>
          <section className="hidden">
            <div className="grid gap-4">
              <div>
                <h3 className="mb-2 text-lg font-medium">REST POST</h3>
                <pre className="rounded-md bg-muted p-4 text-sm">
                  <code>{`
const response = await fetch('/api/procedures/GetOrdersByUser', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({ UserId: 123 }),
});

const data = await response.json();
console.log(data);
                    `}</code>
                </pre>
              </div>
            </div>
          </section>
        </div>
      </div>
      <footer className="mt-auto border-t bg-background px-4 py-4 shadow-sm sm:px-6">
        <div className="container mx-auto flex items-center justify-between">
          <p className="text-sm text-muted-foreground">
            &copy; 2024 Acme Inc. All rights reserved.
          </p>
          <div className="flex items-center gap-4">
            <Link
              href="#"
              className="text-sm text-muted-foreground hover:text-foreground"
              prefetch={false}
            >
              Terms of Service
            </Link>
            <Link
              href="#"
              className="text-sm text-muted-foreground hover:text-foreground"
              prefetch={false}
            >
              Privacy Policy
            </Link>
          </div>
        </div>
      </footer>
    </div>
  );
}
