/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Izx83HDpX2F
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState } from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";

export function InterfaceViewer() {
  const [selectedLanguage, setSelectedLanguage] = useState("typescript");
  return (
    <div className="flex flex-col items-center justify-center h-screen bg-muted/40">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>JSON Schema Interface</CardTitle>
          <CardDescription>
            View the schema in different programming languages.
          </CardDescription>
        </CardHeader>
        <CardContent className="grid gap-6">
          {/* <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="justify-between w-full">
                <div className="flex items-center gap-2">
                  {selectedLanguage === "typescript" && (
                    <TypeIcon className="w-5 h-5" />
                  )}
                  {selectedLanguage === "go" && (
                    <MoveIcon className="w-5 h-5" />
                  )}
                  {selectedLanguage === "csharp" && (
                    <ShellIcon className="w-5 h-5" />
                  )}
                  {selectedLanguage === "python" && (
                    <PiIcon className="w-5 h-5" />
                  )}
                  {selectedLanguage === "powershell" && (
                    <ShellIcon className="w-5 h-5" />
                  )}
                  <span>{selectedLanguage.toUpperCase()}</span>
                </div>
                <ChevronDownIcon className="w-4 h-4 text-muted-foreground" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-48">
              <DropdownMenuItem
                onClick={() => setSelectedLanguage("typescript")}
                className="flex items-center gap-2"
              >
                <TypeIcon className="w-5 h-5" />
                TypeScript
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => setSelectedLanguage("go")}
                className="flex items-center gap-2"
              >
                <MoveIcon className="w-5 h-5" />
                Go
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => setSelectedLanguage("csharp")}
                className="flex items-center gap-2"
              >
                <ShellIcon className="w-5 h-5" />
                C#
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => setSelectedLanguage("python")}
                className="flex items-center gap-2"
              >
                <PiIcon className="w-5 h-5" />
                Python
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => setSelectedLanguage("powershell")}
                className="flex items-center gap-2"
              >
                <ShellIcon className="w-5 h-5" />
                PowerShell
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu> */}
          <div className="prose text-muted-foreground">
            {selectedLanguage === "typescript" && (
              <pre>
                <code>{`
interface User {
  id: string;
  name: string;
  email: string;
  createdAt: string;
}
                  `}</code>
              </pre>
            )}
            {selectedLanguage === "go" && (
              <pre>
                <code>{`
type User struct {
    ID        string    \`json:"id"\`
    Name      string    \`json:"name"\`
    Email     string    \`json:"email"\`
    CreatedAt time.Time \`json:"createdAt"\`
}
                  `}</code>
              </pre>
            )}
            {selectedLanguage === "csharp" && (
              <pre>
                <code>{`
public class User
{
    public string Id { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
    public DateTime CreatedAt { get; set; }
}
                  `}</code>
              </pre>
            )}
            {selectedLanguage === "python" && (
              <pre>
                <code>{`
class User:
    def __init__(self, id: str, name: str, email: str, created_at: str):
        self.id = id
        self.name = name
        self.email = email
        self.created_at = created_at
                  `}</code>
              </pre>
            )}
            {selectedLanguage === "powershell" && (
              <pre>
                <code>{`
class User {
    [string]$Id
    [string]$Name
    [string]$Email
    [datetime]$CreatedAt
}
                  `}</code>
              </pre>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function ChevronDownIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m6 9 6 6 6-6" />
    </svg>
  );
}

function MoveIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="5 9 2 12 5 15" />
      <polyline points="9 5 12 2 15 5" />
      <polyline points="15 19 12 22 9 19" />
      <polyline points="19 9 22 12 19 15" />
      <line x1="2" x2="22" y1="12" y2="12" />
      <line x1="12" x2="12" y1="2" y2="22" />
    </svg>
  );
}

function PiIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="9" x2="9" y1="4" y2="20" />
      <path d="M4 7c0-1.7 1.3-3 3-3h13" />
      <path d="M18 20c-1.7 0-3-1.3-3-3V4" />
    </svg>
  );
}

function ShellIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M14 11a2 2 0 1 1-4 0 4 4 0 0 1 8 0 6 6 0 0 1-12 0 8 8 0 0 1 16 0 10 10 0 1 1-20 0 11.93 11.93 0 0 1 2.42-7.22 2 2 0 1 1 3.16 2.44" />
    </svg>
  );
}

function TypeIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="4 7 4 4 20 4 20 7" />
      <line x1="9" x2="15" y1="20" y2="20" />
      <line x1="12" x2="12" y1="4" y2="20" />
    </svg>
  );
}
