"use client";

import { useState } from "react";
import { Book, PlusCircle, Edit, Trash2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { database } from "@/actions/database/works/activityModel";

type Action = "read" | "add" | "update" | "delete";

const snippets = (
  databaseName: string,
  tableName: string,
  id: string,
  interfaceCode: string,
  interfaceName: string
): Record<Action, string> => {
  debugger;
  return {
    read:
      `
      
  
 

/*
You might need one of the following imports - uncomment the one you need
*/
// import { useSQLSelect3 } from "@/app/koksmat/usesqlselect3";
// import React, { useEffect, useState } from "react";

 function useDatabase${interfaceName}Read(id: string) {
  /* ---------------------- Load Record ---------------------- 
  * This code is generated by Magic Button Studio. You can modify it as you like.
  * The code is generated based on the database and table you have selected.
  * No warranty is given for the code.
  * 
  * Suggest that you use the refactor function and move the code to a separate file,
  * then move that file to a folder where you keep your custom hooks.
  * ----------------------------------------------------------
  */

/*
  Sample usage: 
  const { databaseRecord, isLoading, error } = useDatabase${interfaceName}Read(props.id);  // replace props.id with the id of the record you want to load
 */
   ${interfaceCode}
  const [error, seterror] = useState("");
  const databaseQuery = useSQLSelect3< ${interfaceName ? interfaceName : "any"}>(
    "${databaseName}",
    ` +
      "`" +
      `SELECT * FROM "${tableName}" WHERE id = \${id}` +
      ` ` +
      "` // you might like to take the id from somewhere else" +
      `
  );
  const [databaseRecord, setdatabaseRecord] = useState< ${interfaceName}>();
  useEffect(() => {
    if (databaseQuery.isLoading) return;
    if (databaseQuery.error) {
      seterror(databaseQuery.error);
      return;
    }
    if (databaseQuery.dataset.length === 0) {
      seterror("No data found");
      return;
    }
    setdatabaseRecord(databaseQuery.dataset[0]);


  }, [databaseQuery]);
  
 

   return { databaseRecord, error, isLoading: databaseQuery.isLoading };
  }
  
  
  `,
    add: `
      
  
  /*
 You might need one of the following imports - uncomment the one you need
 */
 // import { execute } from "@/actions/client";
 // import React, { useEffect, useState } from "react";
 
   
     function useDatabase${interfaceName}Create() {
     /* ---------------------- Create Record ---------------------- 
   * This code is generated by Magic Button Studio. You can modify it as you like.
   * The code is generated based on the database and table you have selected.
   * No warranty is given for the code.
   * 
   * Suggest that you use the refactor function and move the code to a separate file,
   * then move that file to a folder where you keep your custom hooks.
 
   * ----------------------------------------------------------
   */
 
     ${interfaceCode}
     type update${interfaceName} = Omit<${interfaceName}, "id" | "created_at" | "created_by" | "updated_at" | "updated_by" | "deleted_at" | "koksmat_masterdataref" | "koksmat_bucket" | "koksmat_masterdata_id" | "koksmat_masterdata_etag" | "koksmat_state" | "koksmat_compliancetag">;
     const magicbox = useContext(MagicboxContext);
     const [error, seterror] = useState("");
     const [loading, setloading] = useState(false);
     const [result, setresult] = useState<any>();
   const createItem = async (record: update${interfaceName}) => {
     setloading(true);
     seterror("");
     const result = await execute(
 
       magicbox.authtoken, // <-- this is the authentication token containing the user's credentials - the upn will be used as "actor" name
       "${database}", // <-- this is a reference to a record in the connections table in the mix database
       "magic-mix.app", // <-- this is the service name processing the request
       "create_${tableName}", // <-- this is the name of the procedure in the database pointed to by the connection
       record // <-- this is the data to be sent to the procedure
     );
     setloading(false);
     if (result.hasError) {
       seterror(result.errorMessage ?? "Unknown error");
     }
     setresult(result);
 
 
   }
   return { createItem, error, loading, result };
     }
 
     
     `,
    update: `
      
  
 /*
You might need one of the following imports - uncomment the one you need
*/
// import { execute } from "@/actions/client";
// import React, { useEffect, useState } from "react";

  
    function useDatabase${interfaceName}Update() {
    /* ---------------------- Update Record ---------------------- 
  * This code is generated by Magic Button Studio. You can modify it as you like.
  * The code is generated based on the database and table you have selected.
  * No warranty is given for the code.
  * 
  * Suggest that you use the refactor function and move the code to a separate file,
  * then move that file to a folder where you keep your custom hooks.

  * ----------------------------------------------------------
  */

    ${interfaceCode}
    type update${interfaceName} = Omit<${interfaceName}, "created_at" | "created_by" | "updated_at" | "updated_by" | "deleted_at" | "koksmat_masterdataref" | "koksmat_bucket" | "koksmat_masterdata_id" | "koksmat_masterdata_etag" | "koksmat_state" | "koksmat_compliancetag">;
    const magicbox = useContext(MagicboxContext);
    const [error, seterror] = useState("");
    const [loading, setloading] = useState(false);
    const [result, setresult] = useState<any>();
  const updateItem = async (record: update${interfaceName}) => {
    setloading(true);
    seterror("");
    const result = await execute(

      magicbox.authtoken, // <-- this is the authentication token containing the user's credentials - the upn will be used as "actor" name
      "${database}", // <-- this is a reference to a record in the connections table in the mix database
      "magic-mix.app", // <-- this is the service name processing the request
      "update_${tableName}", // <-- this is the name of the procedure in the database pointed to by the connection
      record // <-- this is the data to be sent to the procedure
    );
    setloading(false);
    if (result.hasError) {
      seterror(result.errorMessage ?? "Unknown error");
    }
    setresult(result);


  }
  return { updateItem, error, loading, result };
    }

    
    `,
    delete: `
      
  
  /*
 You might need one of the following imports - uncomment the one you need
 */
 // import { execute } from "@/actions/client";
 // import React, { useEffect, useState } from "react";
 
   
     function useDatabase${interfaceName}Delete() {
     /* ---------------------- Delete Record ---------------------- 
   * This code is generated by Magic Button Studio. You can modify it as you like.
   * The code is generated based on the database and table you have selected.
   * No warranty is given for the code.
   * 
   * Suggest that you use the refactor function and move the code to a separate file,
   * then move that file to a folder where you keep your custom hooks.
 
   * ----------------------------------------------------------
   */
 
     const magicbox = useContext(MagicboxContext);
     const [error, seterror] = useState("");
     const [loading, setloading] = useState(false);
     const [result, setresult] = useState<any>();
   const deleteItem = async (id :number,hard:boolean) => {
     setloading(true);
     seterror("");
     const result = await execute(
 
       magicbox.authtoken, // <-- this is the authentication token containing the user's credentials - the upn will be used as "actor" name
       "${database}", // <-- this is a reference to a record in the connections table in the mix database
       "magic-mix.app", // <-- this is the service name processing the request
       "delete_${tableName}", // <-- this is the name of the procedure in the database pointed to by the connection
       record // <-- this is the data to be sent to the procedure
     );
     setloading(false);
     if (result.hasError) {
       seterror(result.errorMessage ?? "Unknown error");
     }
     setresult(result);
 
 
   }
   return { deleteItem, error, loading, result };
     }
 
     
     `,
  };
};

export default function DatabaseItemSnippetTools(props: {
  databaseName: string;
  tableName: string;
  interfaceCode: string;
  interfaceName: string;
  id: string;
}) {
  const { databaseName, tableName, id, interfaceCode, interfaceName } = props;
  const [copiedAction, setCopiedAction] = useState<Action | null>(null);

  const copyToClipboard = async (action: Action) => {
    try {
      await navigator.clipboard.writeText(
        snippets(databaseName, tableName, id, interfaceCode, interfaceName)[
        action
        ]
      );
      setCopiedAction(action);
      setTimeout(() => setCopiedAction(null), 2000);
    } catch (err) {
      console.error("Failed to copy text: ", err);
    }
  };

  const renderButton = (
    action: Action,
    icon: React.ReactNode,
    label: string
  ) => (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant="outline"
            size="icon"
            className={`relative ${copiedAction === action ? "animate-pulse" : ""}`}
            onClick={() => copyToClipboard(action)}
          >
            {icon}
            <span className="sr-only">{label}</span>
            {copiedAction === action && (
              <span className="absolute -top-2 -right-2 flex h-5 w-5 items-center justify-center rounded-full bg-green-500 text-[10px] text-white">
                âœ“
              </span>
            )}
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>{label}</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );

  return (
    <div className="flex space-x-2  bg-background rounded-lg shadow">
      {renderButton("read", <Book className="h-4 w-4" />, "Read Record")}
      {renderButton("add", <PlusCircle className="h-4 w-4" />, "Add Record")}
      {renderButton("update", <Edit className="h-4 w-4" />, "Update Record")}
      {renderButton("delete", <Trash2 className="h-4 w-4" />, "Delete Record")}
    </div>
  );
}
