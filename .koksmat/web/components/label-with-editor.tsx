/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/A8D8NoAeG3i
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { SaveIcon } from "lucide-react";

export function LabelWithEditor(props: {
  initialValue: string;
  onSave: (value: string) => void;
}) {
  const { initialValue, onSave } = props;
  const [isEditing, setIsEditing] = useState(false);
  const [value, setValue] = useState(initialValue);
  const [newValue, setNewValue] = useState("");
  const handleClick = () => {
    setIsEditing(true);
    setNewValue(value);
  };
  const handleSave = () => {
    if (newValue.trim() !== "") {
      onSave(newValue);
      setIsEditing(false);
      setValue(newValue);
    }
  };
  const handleCancel = () => {
    setIsEditing(false);
    setNewValue(value);
  };
  const handleOutsideClick = (event: any) => {
    if (event.target.closest(".editable-value") === null) {
      setIsEditing(false);
      setNewValue(value);
    }
  };
  useEffect(() => {
    document.addEventListener("click", handleOutsideClick);
    return () => {
      document.removeEventListener("click", handleOutsideClick);
    };
  }, []);
  return (
    <div className="editable-value relative inline-block">
      {isEditing ? (
        <div className="flex items-center gap-2">
          <Input
            value={newValue}
            onChange={(e) => setNewValue(e.target.value)}
            className="w-40"
          />
          <Button
            variant="ghost"
            onClick={handleSave}
            disabled={newValue.trim() === ""}
            className="h-8"
          >
            <SaveIcon size={16} />
          </Button>
          {/* <Button onClick={handleCancel} variant="outline" className="h-8">
            Cancel
          </Button> */}
        </div>
      ) : (
        <div onClick={handleClick} className="cursor-pointer">
          {value}
        </div>
      )}
    </div>
  );
}
